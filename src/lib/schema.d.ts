/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/position": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description List positions */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["PositionsMapMulti"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/leg": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description List legs */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["TargetLegConfig"][];
                    };
                };
            };
        };
        /** @description Add leg */
        put: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["TargetLegConfig"];
                };
            };
            responses: {
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": string;
                    };
                };
            };
        };
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/leg/example": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Example config */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["TargetLegConfig"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/leg/preview": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description List legs review */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["TargetLegConfig"][];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/schedule": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description List schedule preview */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": unknown;
                    };
                };
            };
        };
        /** @description Put schedule leg */
        put: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["TargetLegConfig"];
                };
            };
            responses: {
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": string;
                    };
                };
            };
        };
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/docs/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description HTML content */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/html": string;
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/docs/openapi.json": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: never;
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        AccountId: string;
        /** Format: duration */
        Duration: number;
        InstrumentCode: string;
        /** @enum {string} */
        LegSchedulerType: "none" | "basis-arbitrage";
        /** @enum {string} */
        NumberUnit: "Raw" | "Base" | "Quote" | "Notional";
        OrderType: ("Unknown" | "Market" | "Limit" | "PostOnly" | "TriggerLimit" | "TriggerMarket" | "TakeProfitLimit" | "TakeProfitMarket" | "StopLossLimit" | "StopLossMarket") | "DirectLimit";
        /** @description a general position struct for spot/margin/futures */
        Position: {
            account: components["schemas"]["AccountId"];
            /**
             * Format: double
             * @description spot/margin/futures: available balance that can be used for trading, not necessarily withdraw-able depending on the exchange
             *
             *     with futures leverage, costed initial is smaller than order's initial without leverage
             *
             *     futures margin: available = total - locked
             *
             *     with margin, costed does not change but may exceed available collateral balance
             */
            available: number;
            /** Format: double */
            borrowed: number;
            /** Format: double */
            collateral_margin: number;
            /** Format: double */
            entry_price: number;
            /** Format: double */
            initial_margin_order: number;
            /** Format: double */
            initial_margin_position: number;
            /** Format: double */
            initial_margin_total: number;
            instrument: components["schemas"]["InstrumentCode"];
            /** Format: double */
            leverage: number;
            /**
             * Format: double
             * @description spot: locked balance for open orders
             *
             *     margin/futures: initial = initial margin for open orders + initial margin for positions + collateral for borrowing
             */
            locked: number;
            /**
             * Format: double
             * @description maintenance margin for margin/futures. this usually includes the initial margin
             */
            maintenance_margin: number;
            /**
             * Format: double
             * @description spot: total balance
             *
             *     margin mixed: total collateral balance (positive) or total borrowed balance (negative)
             *
             *     margin balance: total collateral balance (positive)
             *
             *     margin position: total borrowed balance (positive) or total lent balance (negative)
             *
             *     futures position: total position
             *
             *     futures margin: account equity = total balance + unrealized pnl - maintenance margin
             *
             *     it's hidden because other modules may operate directly on it
             */
            total: number;
            unit: components["schemas"]["NumberUnit"];
            update_est: components["schemas"]["time"];
            update_lt: components["schemas"]["time"];
            update_tst: components["schemas"]["time"];
        };
        PositionsMap: {
            account: components["schemas"]["AccountId"];
            /** @description positions by instrument */
            positions: {
                [key: string]: components["schemas"]["Position"];
            };
        };
        PositionsMapMulti: {
            portfolios: {
                [key: string]: components["schemas"]["PositionsMap"];
            };
        };
        TargetLegConfig: {
            account: components["schemas"]["AccountId"];
            allow_close: boolean;
            bidirectional: boolean;
            cancel_live_orders: boolean;
            instrument: components["schemas"]["InstrumentCode"];
            logging: boolean;
            /**
             * Format: double
             * @description maker fee in ratio. e.g. 0.001
             */
            maker_fee: number;
            maker_order_type: components["schemas"]["OrderType"];
            margin: boolean;
            /** Format: uint32 */
            max_order_number: number;
            order_delay: components["schemas"]["Duration"];
            /** Format: double */
            order_quantity: number;
            /** Format: double */
            quote_step: number;
            /** @default none */
            scheduler: components["schemas"]["LegSchedulerType"];
            /**
             * Format: double
             * @description taker fee in ratio. e.g. 0.001
             */
            taker_fee: number;
            taker_order_type: components["schemas"]["OrderType"];
            /** Format: double */
            target_position?: number | null;
        };
        /** Format: int64 */
        time: number;
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export type operations = Record<string, never>;
